1.why use
	1.1:项目之间的解耦，项目和项目之间可以通过中间件解耦，不必直接的接口调用
	1.2:流量削峰，在并发量很大的情况下，可以利用mq减轻数据库的压力，同时也可以类似于前100用户抢购商品等需求
	1.3:异步省时，非必须的业务操作可以通过去Q里面拿消息异步进行接下来非必须的业务，加快响应速度
2.some trouble
	2.1:系统接入了mq后，如果mq的可用性差会影响项目的稳定性
	2.2:增大了系统的复杂程度，比如要额外考虑如何收发消息，实时性，顺序等等
3.select witch mq
	市场上有很多的成熟的mq中间件，比如activemq，rabbitmq,rocketmq,kafuka等，
	rabbitmq是erlang语言编写的，时效性us级别，天生支持高并发场景，kafuka则对大数据支持好
4.rabbit unique feature
	java接入rabbit的一些基本概念：
	4.1:连接工厂ConnectionFactory，客户端可通过工厂获取和mq的连接，是客户端和broker的tcp连接工厂
	4.2:Connection，可通过Connection获取和mq交互的channel信道，一个connection连接可以创建多个channel，一般发送或者消费完后会close掉，创建连接会消耗资源
	4.3:Channel，在Connection基础上建立的虚拟连接，支持多线程，每个channel有自己的唯一标识id，channel复用Connection的tcp连接，减少创建连接和销毁连接所耗费
		的资源，
	4.4:Exchange，交换器，交换器可以通过channel声明，producer发送消息会先发送到交换机上，交换机根据自己的类型和路由规则将消息发送到对应的queue中，queue可
		通过日志等方式对消息做持久化操作，防止消息的丢失，exchange自身是不存放消息的，只是转发消息的一个载体
		exchange的几种类型:1.fanout（发布订阅模式），此种类型交换机会将消息发送给所有和它进行绑定了的queue。2.driect,有一个路由键routingKey概念，在创建完
		交换机和队列后，需要建立绑定关系routingKey，当producer端发送消息时设定的routingKey和绑定关系时的routingKey完全匹配，driect交换机才会把消息消息发送给		
		这个队列。3.topic，在driect的基础上，routingKey支持了更多的匹配规则，适用于更多场景。
	4.5:Queue，消费者是无法从未声明的queue中获取消息的，preducer端发送消息后，exchange找不到对应的queue发送消息时，该消息会被丢弃，一般producer端和consumer端	
		都可以去定义同一个queue，消息由两部分组成:  payload and  label. "payload"是实际要传输的数据,至于数据的格式RabbitMQ并不关心,"label"描述payload,包括exchange name 和可选的topic tag.消息一旦到了consumer那里就只有payload部分了,label部分并没有带过来.RabbitMQ并不告诉你消息是谁发出的.这好比你收到一封信但是信封上是空白的.当然想知道是谁发的还是有办法的,在消息内容中包含发送者的信息就可以了
		   消息的consumer和producer对应的概念是sending和receiving并不对应client和server.通过channel我们可以创建很多并行的传输 TCP链接不再成为瓶颈,我们可以把RabbitMQ当做应用程序级别的路由器.
		Consumer消息的接收方式
			 Consumer有两种方式接收消息:
			 通过basic.consume 订阅队列.channel将进入接收模式直到你取消订阅.订阅模式下Consumer只要上一条消息处理完成(ACK或拒绝),就会主动接收新消息.如果消息到达queue就希望得到尽快处理,也应该使用basic.consume命令.
			 还有一种情况,我们不需要一直保持订阅,只要使用basic.get命令主动获取消息即可.当前消息处理完成之后,继续获取消息需要主动执行basic.get 不要"在循环中使用basic.ge"t当做另外一种形式的basic.consume,因为这种做法相比basic.consume有额外的成本:basic.get本质上就是先订阅queue取回一条消息之后取消订阅.Consumer吞吐量大的情况下通常都会使用basic.consume.
		要是没有Consumer怎么办?
			 如果消息没有Consumer就会老老实实呆在队列里面.
		多个Consumer订阅同一个队列
			只要Consumer订阅了queue,消息就会发送到该Consumer.我们的问题是这种情况下queue中的消息是如何分发的?
			如果一个rabbit queue有多个consumer,具体到队列中的某条消息只会发送到其中的一个Consumer.
5.message confirm
	5.1:producer confirm 有加事务，confirmSelect 进入确认模式waitForConfirms获取返回结果判断消息发送是否成功（同步）和addConfirmListener（异步）的方式去进行消息发送确认，
		这里只是判断broker收到了producer发送的消息，
	5.2:consumer关闭autoAck，手动ack可防止消息丢失
	5.3:开启mq的持久化防止消息服务的重启或者宕机导致数据丢失（还是可能有数据丢失）
6. 搭建集群，提高系统可用性

			
			
			
			
			
			
			
			
			
			